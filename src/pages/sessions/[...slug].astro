---
import { CollectionEntry, getCollection, getEntry } from "astro:content";
import BaseLayout from "../../components/Common/BaseLayout.astro";
import { generateSessionCalendarEvent } from "../../scripts/calendar_helper";
// 1. Generate a new path for every collection entry

interface Props {
  entry: CollectionEntry<"sessions">;
}

export async function getStaticPaths() {
  const sessions = await getCollection("sessions");
  return sessions.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();

var date = entry.data.dateStart.toLocaleDateString("en-US", {
  day: "numeric",
  month: "short",
});

const start = entry.data.dateStart.toLocaleTimeString("en-US", {
  hour: "numeric",
  minute: "numeric",
});

const end = entry.data.dateEnd.toLocaleTimeString("en-US", {
  hour: "numeric",
  minute: "numeric",
});

var speaker = await getEntry(entry.data.speaker);

function formatDate(date: Date) {
  const year = date.getUTCFullYear();
  const month = date.getUTCMonth() + 1;
  const day = date.getUTCDate();
  const hours = date.getUTCHours();
  const minutes = date.getUTCMinutes();

  return `${year}${month}${day > 9 ? day : "0" + day}T${
    hours > 9 ? hours : "0" + hours
  }${minutes > 9 ? minutes : "0" + minutes}00Z`;
}
---

<BaseLayout pageTitle="Sessions">
  <div class="flex md:flex-row flex-col justify-between md:items-center items-start  gap-2 mb-6 cursor-pointer">
    <h2 class="text-4xl mb-3">{entry.data.title}</h2>
    <div
      class="add-to-calendar m-y py-2 px-4 rounded-r-sm hover:bg-amber-400/20 border border-amber-600 text-amber-600 ease-in duration-100 text-center"
      time-start={formatDate(entry.data.dateStart)}
      time-end={formatDate(entry.data.dateEnd)}
      session-details={encodeURIComponent(
        `Speaker: ${speaker.data.name} \nTopics: ${entry.data.tags.join(" ")}`
      )}
      session-title={entry.data.title}
      session-location={entry.data.location}
    >
      Aggiungi al calendario
    </div>
  </div>
  <div class="flex flex-wrap gap-2 mb-6">
    <div class="py-1 px-2 rounded-md bg-green-600 text-white">
      <span class="text-sm">{entry.data.level}</span>
    </div>

    {
      entry.data.tags.map((t) => (
        <div class="py-1 px-2 rounded-md bg-gray-200 text-gray-800">
          <span class="text-sm">{t}</span>
        </div>
      ))
    }
  </div>
  <div class="mb-6">
    <p class="text-lg">{entry.data.location}</p>
    <p class="text-lg">{date}, {start} - {end}</p>
  </div>
  <Content />
  <div class="mt-10">
    <p class="text-3xl mb-6">Speakers</p>

    <a
      href={`/speakers/${speaker.slug}`}
      class="flex md:flex-row flex-col items-center mb-6"
    >
      <div class="flex-none w-24 mb-2">
        <img
          src={`/assets/images/speakers/${speaker.data.image}`}
          alt={speaker.data.name}
          class="rounded-full"
        />
      </div>
      <div class="flex-1 pl-6 flex flex-col md:items-start items-center">
        <h2 class="text-4xl mb-1">{speaker.data.name}</h2>
        <p class="text-lg mb-3">{speaker.data.tagline}</p>
      </div>
    </a>
  </div>
</BaseLayout>

<script>
  const pageUrl = window.location.href;

  const addToCalendar = document.querySelector(".add-to-calendar");
  addToCalendar?.addEventListener("click", () => {
    const timeStart = addToCalendar.getAttribute("time-start");
    const timeEnd = addToCalendar.getAttribute("time-end");
    const details =
      addToCalendar.getAttribute("session-details") + `%0APage: ${pageUrl}`;
    const location = addToCalendar.getAttribute("session-location");
    const title = addToCalendar.getAttribute("session-title");

    const url = `https://calendar.google.com/calendar/render?action=TEMPLATE&dates=${timeStart}Z%2F${timeEnd}Z&details=${details}&location=${location}&text=${title}%201`;

    return open(url, "_blank");
  });
</script>
